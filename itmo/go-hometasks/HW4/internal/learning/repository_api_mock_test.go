package learning

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i hw4/internal/learning.RepositoryApi -o ./repository_api_mock_test.go -n RepositoryApiMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryApiMock implements RepositoryApi
type RepositoryApiMock struct {
	t minimock.Tester

	funcGetAllSubjects          func() (sa1 []string, b1 bool)
	inspectFuncGetAllSubjects   func()
	afterGetAllSubjectsCounter  uint64
	beforeGetAllSubjectsCounter uint64
	GetAllSubjectsMock          mRepositoryApiMockGetAllSubjects

	funcGetAllSubjectsInfo          func() (sa1 []subjectInfo, b1 bool)
	inspectFuncGetAllSubjectsInfo   func()
	afterGetAllSubjectsInfoCounter  uint64
	beforeGetAllSubjectsInfoCounter uint64
	GetAllSubjectsInfoMock          mRepositoryApiMockGetAllSubjectsInfo

	funcGetStudentInfo          func(id int64) (sp1 *studentInfo, b1 bool)
	inspectFuncGetStudentInfo   func(id int64)
	afterGetStudentInfoCounter  uint64
	beforeGetStudentInfoCounter uint64
	GetStudentInfoMock          mRepositoryApiMockGetStudentInfo
}

// NewRepositoryApiMock returns a mock for RepositoryApi
func NewRepositoryApiMock(t minimock.Tester) *RepositoryApiMock {
	m := &RepositoryApiMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetAllSubjectsMock = mRepositoryApiMockGetAllSubjects{mock: m}

	m.GetAllSubjectsInfoMock = mRepositoryApiMockGetAllSubjectsInfo{mock: m}

	m.GetStudentInfoMock = mRepositoryApiMockGetStudentInfo{mock: m}
	m.GetStudentInfoMock.callArgs = []*RepositoryApiMockGetStudentInfoParams{}

	return m
}

type mRepositoryApiMockGetAllSubjects struct {
	mock               *RepositoryApiMock
	defaultExpectation *RepositoryApiMockGetAllSubjectsExpectation
	expectations       []*RepositoryApiMockGetAllSubjectsExpectation
}

// RepositoryApiMockGetAllSubjectsExpectation specifies expectation struct of the RepositoryApi.GetAllSubjects
type RepositoryApiMockGetAllSubjectsExpectation struct {
	mock *RepositoryApiMock

	results *RepositoryApiMockGetAllSubjectsResults
	Counter uint64
}

// RepositoryApiMockGetAllSubjectsResults contains results of the RepositoryApi.GetAllSubjects
type RepositoryApiMockGetAllSubjectsResults struct {
	sa1 []string
	b1  bool
}

// Expect sets up expected params for RepositoryApi.GetAllSubjects
func (mmGetAllSubjects *mRepositoryApiMockGetAllSubjects) Expect() *mRepositoryApiMockGetAllSubjects {
	if mmGetAllSubjects.mock.funcGetAllSubjects != nil {
		mmGetAllSubjects.mock.t.Fatalf("RepositoryApiMock.GetAllSubjects mock is already set by Set")
	}

	if mmGetAllSubjects.defaultExpectation == nil {
		mmGetAllSubjects.defaultExpectation = &RepositoryApiMockGetAllSubjectsExpectation{}
	}

	return mmGetAllSubjects
}

// Inspect accepts an inspector function that has same arguments as the RepositoryApi.GetAllSubjects
func (mmGetAllSubjects *mRepositoryApiMockGetAllSubjects) Inspect(f func()) *mRepositoryApiMockGetAllSubjects {
	if mmGetAllSubjects.mock.inspectFuncGetAllSubjects != nil {
		mmGetAllSubjects.mock.t.Fatalf("Inspect function is already set for RepositoryApiMock.GetAllSubjects")
	}

	mmGetAllSubjects.mock.inspectFuncGetAllSubjects = f

	return mmGetAllSubjects
}

// Return sets up results that will be returned by RepositoryApi.GetAllSubjects
func (mmGetAllSubjects *mRepositoryApiMockGetAllSubjects) Return(sa1 []string, b1 bool) *RepositoryApiMock {
	if mmGetAllSubjects.mock.funcGetAllSubjects != nil {
		mmGetAllSubjects.mock.t.Fatalf("RepositoryApiMock.GetAllSubjects mock is already set by Set")
	}

	if mmGetAllSubjects.defaultExpectation == nil {
		mmGetAllSubjects.defaultExpectation = &RepositoryApiMockGetAllSubjectsExpectation{mock: mmGetAllSubjects.mock}
	}
	mmGetAllSubjects.defaultExpectation.results = &RepositoryApiMockGetAllSubjectsResults{sa1, b1}
	return mmGetAllSubjects.mock
}

// Set uses given function f to mock the RepositoryApi.GetAllSubjects method
func (mmGetAllSubjects *mRepositoryApiMockGetAllSubjects) Set(f func() (sa1 []string, b1 bool)) *RepositoryApiMock {
	if mmGetAllSubjects.defaultExpectation != nil {
		mmGetAllSubjects.mock.t.Fatalf("Default expectation is already set for the RepositoryApi.GetAllSubjects method")
	}

	if len(mmGetAllSubjects.expectations) > 0 {
		mmGetAllSubjects.mock.t.Fatalf("Some expectations are already set for the RepositoryApi.GetAllSubjects method")
	}

	mmGetAllSubjects.mock.funcGetAllSubjects = f
	return mmGetAllSubjects.mock
}

// GetAllSubjects implements RepositoryApi
func (mmGetAllSubjects *RepositoryApiMock) GetAllSubjects() (sa1 []string, b1 bool) {
	mm_atomic.AddUint64(&mmGetAllSubjects.beforeGetAllSubjectsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAllSubjects.afterGetAllSubjectsCounter, 1)

	if mmGetAllSubjects.inspectFuncGetAllSubjects != nil {
		mmGetAllSubjects.inspectFuncGetAllSubjects()
	}

	if mmGetAllSubjects.GetAllSubjectsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAllSubjects.GetAllSubjectsMock.defaultExpectation.Counter, 1)

		mm_results := mmGetAllSubjects.GetAllSubjectsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAllSubjects.t.Fatal("No results are set for the RepositoryApiMock.GetAllSubjects")
		}
		return (*mm_results).sa1, (*mm_results).b1
	}
	if mmGetAllSubjects.funcGetAllSubjects != nil {
		return mmGetAllSubjects.funcGetAllSubjects()
	}
	mmGetAllSubjects.t.Fatalf("Unexpected call to RepositoryApiMock.GetAllSubjects.")
	return
}

// GetAllSubjectsAfterCounter returns a count of finished RepositoryApiMock.GetAllSubjects invocations
func (mmGetAllSubjects *RepositoryApiMock) GetAllSubjectsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllSubjects.afterGetAllSubjectsCounter)
}

// GetAllSubjectsBeforeCounter returns a count of RepositoryApiMock.GetAllSubjects invocations
func (mmGetAllSubjects *RepositoryApiMock) GetAllSubjectsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllSubjects.beforeGetAllSubjectsCounter)
}

// MinimockGetAllSubjectsDone returns true if the count of the GetAllSubjects invocations corresponds
// the number of defined expectations
func (m *RepositoryApiMock) MinimockGetAllSubjectsDone() bool {
	for _, e := range m.GetAllSubjectsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllSubjectsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAllSubjectsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAllSubjects != nil && mm_atomic.LoadUint64(&m.afterGetAllSubjectsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetAllSubjectsInspect logs each unmet expectation
func (m *RepositoryApiMock) MinimockGetAllSubjectsInspect() {
	for _, e := range m.GetAllSubjectsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RepositoryApiMock.GetAllSubjects")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllSubjectsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAllSubjectsCounter) < 1 {
		m.t.Error("Expected call to RepositoryApiMock.GetAllSubjects")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAllSubjects != nil && mm_atomic.LoadUint64(&m.afterGetAllSubjectsCounter) < 1 {
		m.t.Error("Expected call to RepositoryApiMock.GetAllSubjects")
	}
}

type mRepositoryApiMockGetAllSubjectsInfo struct {
	mock               *RepositoryApiMock
	defaultExpectation *RepositoryApiMockGetAllSubjectsInfoExpectation
	expectations       []*RepositoryApiMockGetAllSubjectsInfoExpectation
}

// RepositoryApiMockGetAllSubjectsInfoExpectation specifies expectation struct of the RepositoryApi.GetAllSubjectsInfo
type RepositoryApiMockGetAllSubjectsInfoExpectation struct {
	mock *RepositoryApiMock

	results *RepositoryApiMockGetAllSubjectsInfoResults
	Counter uint64
}

// RepositoryApiMockGetAllSubjectsInfoResults contains results of the RepositoryApi.GetAllSubjectsInfo
type RepositoryApiMockGetAllSubjectsInfoResults struct {
	sa1 []subjectInfo
	b1  bool
}

// Expect sets up expected params for RepositoryApi.GetAllSubjectsInfo
func (mmGetAllSubjectsInfo *mRepositoryApiMockGetAllSubjectsInfo) Expect() *mRepositoryApiMockGetAllSubjectsInfo {
	if mmGetAllSubjectsInfo.mock.funcGetAllSubjectsInfo != nil {
		mmGetAllSubjectsInfo.mock.t.Fatalf("RepositoryApiMock.GetAllSubjectsInfo mock is already set by Set")
	}

	if mmGetAllSubjectsInfo.defaultExpectation == nil {
		mmGetAllSubjectsInfo.defaultExpectation = &RepositoryApiMockGetAllSubjectsInfoExpectation{}
	}

	return mmGetAllSubjectsInfo
}

// Inspect accepts an inspector function that has same arguments as the RepositoryApi.GetAllSubjectsInfo
func (mmGetAllSubjectsInfo *mRepositoryApiMockGetAllSubjectsInfo) Inspect(f func()) *mRepositoryApiMockGetAllSubjectsInfo {
	if mmGetAllSubjectsInfo.mock.inspectFuncGetAllSubjectsInfo != nil {
		mmGetAllSubjectsInfo.mock.t.Fatalf("Inspect function is already set for RepositoryApiMock.GetAllSubjectsInfo")
	}

	mmGetAllSubjectsInfo.mock.inspectFuncGetAllSubjectsInfo = f

	return mmGetAllSubjectsInfo
}

// Return sets up results that will be returned by RepositoryApi.GetAllSubjectsInfo
func (mmGetAllSubjectsInfo *mRepositoryApiMockGetAllSubjectsInfo) Return(sa1 []subjectInfo, b1 bool) *RepositoryApiMock {
	if mmGetAllSubjectsInfo.mock.funcGetAllSubjectsInfo != nil {
		mmGetAllSubjectsInfo.mock.t.Fatalf("RepositoryApiMock.GetAllSubjectsInfo mock is already set by Set")
	}

	if mmGetAllSubjectsInfo.defaultExpectation == nil {
		mmGetAllSubjectsInfo.defaultExpectation = &RepositoryApiMockGetAllSubjectsInfoExpectation{mock: mmGetAllSubjectsInfo.mock}
	}
	mmGetAllSubjectsInfo.defaultExpectation.results = &RepositoryApiMockGetAllSubjectsInfoResults{sa1, b1}
	return mmGetAllSubjectsInfo.mock
}

// Set uses given function f to mock the RepositoryApi.GetAllSubjectsInfo method
func (mmGetAllSubjectsInfo *mRepositoryApiMockGetAllSubjectsInfo) Set(f func() (sa1 []subjectInfo, b1 bool)) *RepositoryApiMock {
	if mmGetAllSubjectsInfo.defaultExpectation != nil {
		mmGetAllSubjectsInfo.mock.t.Fatalf("Default expectation is already set for the RepositoryApi.GetAllSubjectsInfo method")
	}

	if len(mmGetAllSubjectsInfo.expectations) > 0 {
		mmGetAllSubjectsInfo.mock.t.Fatalf("Some expectations are already set for the RepositoryApi.GetAllSubjectsInfo method")
	}

	mmGetAllSubjectsInfo.mock.funcGetAllSubjectsInfo = f
	return mmGetAllSubjectsInfo.mock
}

// GetAllSubjectsInfo implements RepositoryApi
func (mmGetAllSubjectsInfo *RepositoryApiMock) GetAllSubjectsInfo() (sa1 []subjectInfo, b1 bool) {
	mm_atomic.AddUint64(&mmGetAllSubjectsInfo.beforeGetAllSubjectsInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAllSubjectsInfo.afterGetAllSubjectsInfoCounter, 1)

	if mmGetAllSubjectsInfo.inspectFuncGetAllSubjectsInfo != nil {
		mmGetAllSubjectsInfo.inspectFuncGetAllSubjectsInfo()
	}

	if mmGetAllSubjectsInfo.GetAllSubjectsInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAllSubjectsInfo.GetAllSubjectsInfoMock.defaultExpectation.Counter, 1)

		mm_results := mmGetAllSubjectsInfo.GetAllSubjectsInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAllSubjectsInfo.t.Fatal("No results are set for the RepositoryApiMock.GetAllSubjectsInfo")
		}
		return (*mm_results).sa1, (*mm_results).b1
	}
	if mmGetAllSubjectsInfo.funcGetAllSubjectsInfo != nil {
		return mmGetAllSubjectsInfo.funcGetAllSubjectsInfo()
	}
	mmGetAllSubjectsInfo.t.Fatalf("Unexpected call to RepositoryApiMock.GetAllSubjectsInfo.")
	return
}

// GetAllSubjectsInfoAfterCounter returns a count of finished RepositoryApiMock.GetAllSubjectsInfo invocations
func (mmGetAllSubjectsInfo *RepositoryApiMock) GetAllSubjectsInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllSubjectsInfo.afterGetAllSubjectsInfoCounter)
}

// GetAllSubjectsInfoBeforeCounter returns a count of RepositoryApiMock.GetAllSubjectsInfo invocations
func (mmGetAllSubjectsInfo *RepositoryApiMock) GetAllSubjectsInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllSubjectsInfo.beforeGetAllSubjectsInfoCounter)
}

// MinimockGetAllSubjectsInfoDone returns true if the count of the GetAllSubjectsInfo invocations corresponds
// the number of defined expectations
func (m *RepositoryApiMock) MinimockGetAllSubjectsInfoDone() bool {
	for _, e := range m.GetAllSubjectsInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllSubjectsInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAllSubjectsInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAllSubjectsInfo != nil && mm_atomic.LoadUint64(&m.afterGetAllSubjectsInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetAllSubjectsInfoInspect logs each unmet expectation
func (m *RepositoryApiMock) MinimockGetAllSubjectsInfoInspect() {
	for _, e := range m.GetAllSubjectsInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RepositoryApiMock.GetAllSubjectsInfo")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllSubjectsInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAllSubjectsInfoCounter) < 1 {
		m.t.Error("Expected call to RepositoryApiMock.GetAllSubjectsInfo")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAllSubjectsInfo != nil && mm_atomic.LoadUint64(&m.afterGetAllSubjectsInfoCounter) < 1 {
		m.t.Error("Expected call to RepositoryApiMock.GetAllSubjectsInfo")
	}
}

type mRepositoryApiMockGetStudentInfo struct {
	mock               *RepositoryApiMock
	defaultExpectation *RepositoryApiMockGetStudentInfoExpectation
	expectations       []*RepositoryApiMockGetStudentInfoExpectation

	callArgs []*RepositoryApiMockGetStudentInfoParams
	mutex    sync.RWMutex
}

// RepositoryApiMockGetStudentInfoExpectation specifies expectation struct of the RepositoryApi.GetStudentInfo
type RepositoryApiMockGetStudentInfoExpectation struct {
	mock    *RepositoryApiMock
	params  *RepositoryApiMockGetStudentInfoParams
	results *RepositoryApiMockGetStudentInfoResults
	Counter uint64
}

// RepositoryApiMockGetStudentInfoParams contains parameters of the RepositoryApi.GetStudentInfo
type RepositoryApiMockGetStudentInfoParams struct {
	id int64
}

// RepositoryApiMockGetStudentInfoResults contains results of the RepositoryApi.GetStudentInfo
type RepositoryApiMockGetStudentInfoResults struct {
	sp1 *studentInfo
	b1  bool
}

// Expect sets up expected params for RepositoryApi.GetStudentInfo
func (mmGetStudentInfo *mRepositoryApiMockGetStudentInfo) Expect(id int64) *mRepositoryApiMockGetStudentInfo {
	if mmGetStudentInfo.mock.funcGetStudentInfo != nil {
		mmGetStudentInfo.mock.t.Fatalf("RepositoryApiMock.GetStudentInfo mock is already set by Set")
	}

	if mmGetStudentInfo.defaultExpectation == nil {
		mmGetStudentInfo.defaultExpectation = &RepositoryApiMockGetStudentInfoExpectation{}
	}

	mmGetStudentInfo.defaultExpectation.params = &RepositoryApiMockGetStudentInfoParams{id}
	for _, e := range mmGetStudentInfo.expectations {
		if minimock.Equal(e.params, mmGetStudentInfo.defaultExpectation.params) {
			mmGetStudentInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStudentInfo.defaultExpectation.params)
		}
	}

	return mmGetStudentInfo
}

// Inspect accepts an inspector function that has same arguments as the RepositoryApi.GetStudentInfo
func (mmGetStudentInfo *mRepositoryApiMockGetStudentInfo) Inspect(f func(id int64)) *mRepositoryApiMockGetStudentInfo {
	if mmGetStudentInfo.mock.inspectFuncGetStudentInfo != nil {
		mmGetStudentInfo.mock.t.Fatalf("Inspect function is already set for RepositoryApiMock.GetStudentInfo")
	}

	mmGetStudentInfo.mock.inspectFuncGetStudentInfo = f

	return mmGetStudentInfo
}

// Return sets up results that will be returned by RepositoryApi.GetStudentInfo
func (mmGetStudentInfo *mRepositoryApiMockGetStudentInfo) Return(sp1 *studentInfo, b1 bool) *RepositoryApiMock {
	if mmGetStudentInfo.mock.funcGetStudentInfo != nil {
		mmGetStudentInfo.mock.t.Fatalf("RepositoryApiMock.GetStudentInfo mock is already set by Set")
	}

	if mmGetStudentInfo.defaultExpectation == nil {
		mmGetStudentInfo.defaultExpectation = &RepositoryApiMockGetStudentInfoExpectation{mock: mmGetStudentInfo.mock}
	}
	mmGetStudentInfo.defaultExpectation.results = &RepositoryApiMockGetStudentInfoResults{sp1, b1}
	return mmGetStudentInfo.mock
}

// Set uses given function f to mock the RepositoryApi.GetStudentInfo method
func (mmGetStudentInfo *mRepositoryApiMockGetStudentInfo) Set(f func(id int64) (sp1 *studentInfo, b1 bool)) *RepositoryApiMock {
	if mmGetStudentInfo.defaultExpectation != nil {
		mmGetStudentInfo.mock.t.Fatalf("Default expectation is already set for the RepositoryApi.GetStudentInfo method")
	}

	if len(mmGetStudentInfo.expectations) > 0 {
		mmGetStudentInfo.mock.t.Fatalf("Some expectations are already set for the RepositoryApi.GetStudentInfo method")
	}

	mmGetStudentInfo.mock.funcGetStudentInfo = f
	return mmGetStudentInfo.mock
}

// When sets expectation for the RepositoryApi.GetStudentInfo which will trigger the result defined by the following
// Then helper
func (mmGetStudentInfo *mRepositoryApiMockGetStudentInfo) When(id int64) *RepositoryApiMockGetStudentInfoExpectation {
	if mmGetStudentInfo.mock.funcGetStudentInfo != nil {
		mmGetStudentInfo.mock.t.Fatalf("RepositoryApiMock.GetStudentInfo mock is already set by Set")
	}

	expectation := &RepositoryApiMockGetStudentInfoExpectation{
		mock:   mmGetStudentInfo.mock,
		params: &RepositoryApiMockGetStudentInfoParams{id},
	}
	mmGetStudentInfo.expectations = append(mmGetStudentInfo.expectations, expectation)
	return expectation
}

// Then sets up RepositoryApi.GetStudentInfo return parameters for the expectation previously defined by the When method
func (e *RepositoryApiMockGetStudentInfoExpectation) Then(sp1 *studentInfo, b1 bool) *RepositoryApiMock {
	e.results = &RepositoryApiMockGetStudentInfoResults{sp1, b1}
	return e.mock
}

// GetStudentInfo implements RepositoryApi
func (mmGetStudentInfo *RepositoryApiMock) GetStudentInfo(id int64) (sp1 *studentInfo, b1 bool) {
	mm_atomic.AddUint64(&mmGetStudentInfo.beforeGetStudentInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStudentInfo.afterGetStudentInfoCounter, 1)

	if mmGetStudentInfo.inspectFuncGetStudentInfo != nil {
		mmGetStudentInfo.inspectFuncGetStudentInfo(id)
	}

	mm_params := &RepositoryApiMockGetStudentInfoParams{id}

	// Record call args
	mmGetStudentInfo.GetStudentInfoMock.mutex.Lock()
	mmGetStudentInfo.GetStudentInfoMock.callArgs = append(mmGetStudentInfo.GetStudentInfoMock.callArgs, mm_params)
	mmGetStudentInfo.GetStudentInfoMock.mutex.Unlock()

	for _, e := range mmGetStudentInfo.GetStudentInfoMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.b1
		}
	}

	if mmGetStudentInfo.GetStudentInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStudentInfo.GetStudentInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStudentInfo.GetStudentInfoMock.defaultExpectation.params
		mm_got := RepositoryApiMockGetStudentInfoParams{id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStudentInfo.t.Errorf("RepositoryApiMock.GetStudentInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStudentInfo.GetStudentInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStudentInfo.t.Fatal("No results are set for the RepositoryApiMock.GetStudentInfo")
		}
		return (*mm_results).sp1, (*mm_results).b1
	}
	if mmGetStudentInfo.funcGetStudentInfo != nil {
		return mmGetStudentInfo.funcGetStudentInfo(id)
	}
	mmGetStudentInfo.t.Fatalf("Unexpected call to RepositoryApiMock.GetStudentInfo. %v", id)
	return
}

// GetStudentInfoAfterCounter returns a count of finished RepositoryApiMock.GetStudentInfo invocations
func (mmGetStudentInfo *RepositoryApiMock) GetStudentInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStudentInfo.afterGetStudentInfoCounter)
}

// GetStudentInfoBeforeCounter returns a count of RepositoryApiMock.GetStudentInfo invocations
func (mmGetStudentInfo *RepositoryApiMock) GetStudentInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStudentInfo.beforeGetStudentInfoCounter)
}

// Calls returns a list of arguments used in each call to RepositoryApiMock.GetStudentInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStudentInfo *mRepositoryApiMockGetStudentInfo) Calls() []*RepositoryApiMockGetStudentInfoParams {
	mmGetStudentInfo.mutex.RLock()

	argCopy := make([]*RepositoryApiMockGetStudentInfoParams, len(mmGetStudentInfo.callArgs))
	copy(argCopy, mmGetStudentInfo.callArgs)

	mmGetStudentInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetStudentInfoDone returns true if the count of the GetStudentInfo invocations corresponds
// the number of defined expectations
func (m *RepositoryApiMock) MinimockGetStudentInfoDone() bool {
	for _, e := range m.GetStudentInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStudentInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStudentInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStudentInfo != nil && mm_atomic.LoadUint64(&m.afterGetStudentInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStudentInfoInspect logs each unmet expectation
func (m *RepositoryApiMock) MinimockGetStudentInfoInspect() {
	for _, e := range m.GetStudentInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryApiMock.GetStudentInfo with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStudentInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStudentInfoCounter) < 1 {
		if m.GetStudentInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryApiMock.GetStudentInfo")
		} else {
			m.t.Errorf("Expected call to RepositoryApiMock.GetStudentInfo with params: %#v", *m.GetStudentInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStudentInfo != nil && mm_atomic.LoadUint64(&m.afterGetStudentInfoCounter) < 1 {
		m.t.Error("Expected call to RepositoryApiMock.GetStudentInfo")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryApiMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetAllSubjectsInspect()

		m.MinimockGetAllSubjectsInfoInspect()

		m.MinimockGetStudentInfoInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryApiMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryApiMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetAllSubjectsDone() &&
		m.MinimockGetAllSubjectsInfoDone() &&
		m.MinimockGetStudentInfoDone()
}
